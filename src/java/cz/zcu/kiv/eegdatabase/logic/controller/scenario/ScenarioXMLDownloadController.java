package cz.zcu.kiv.eegdatabase.logic.controller.scenario;

import cz.zcu.kiv.eegdatabase.data.dao.AuthorizationManager;
import cz.zcu.kiv.eegdatabase.data.dao.GenericDao;
import cz.zcu.kiv.eegdatabase.data.dao.PersonDao;
import cz.zcu.kiv.eegdatabase.data.pojo.History;
import cz.zcu.kiv.eegdatabase.data.pojo.Person;
import cz.zcu.kiv.eegdatabase.data.pojo.Scenario;
import cz.zcu.kiv.eegdatabase.logic.util.ControllerUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.AbstractController;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.sql.Blob;
import java.sql.Timestamp;
import java.util.Calendar;

/**
 * This controller loads a data object for the view which serves the downloading of the data file
 *
 * @author Jindra
 */
public class ScenarioXMLDownloadController extends AbstractController {

    private GenericDao<Scenario, Integer> scenarioDao;
    private GenericDao<History, Integer> historyDao;
    private PersonDao personDao;
    private Log log = LogFactory.getLog(getClass());
    private AuthorizationManager auth;

    public AuthorizationManager getAuth() {
        return auth;
    }

    public void setAuth(AuthorizationManager auth) {
        this.auth = auth;
    }

    @Override
    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {
        //   ModelAndView mav = new ModelAndView("scenarioXMLDownloadView");
        // There should always be set integer value in this field - it is generated by view, not by user
        log.debug("Processing download scenario.");
        int scenarioId = Integer.parseInt(request.getParameter("scenarioId"));
        Scenario scenario = scenarioDao.read(scenarioId);
        Blob c = scenario.getScenarioXml();
        Person user = personDao.getPerson(ControllerUtils.getLoggedUserName());
        Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
        History history = new History();
        log.debug("Setting downloading scenario");
        history.setScenario(scenario);
        log.debug("Setting user");
        history.setPerson(user);
        log.debug("Setting time of download");
        history.setDateOfDownload(currentTimestamp);
        log.debug("Saving download history");
        historyDao.create(history);
        // System.out.println(scenario.getMimetype());
        response.setHeader("Content-Type", scenario.getMimetype());
        response.setHeader("Content-Disposition", "attachment;filename=" + scenario.getScenarioName());
        response.getOutputStream().write(c.getBytes(1, (int) c.length()));
        response.flushBuffer();
        // mav.addObject("dataObject", scenarioDao.read(scenarioId));

        return null;
    }

    public GenericDao<Scenario, Integer> getScenarioDao() {
        return scenarioDao;
    }

    public void setScenarioDao(GenericDao<Scenario, Integer> scenarioDao) {
        this.scenarioDao = scenarioDao;
    }

    public GenericDao<History, Integer> getHistoryDao() {
        return historyDao;
    }

    public void setHistoryDao(GenericDao<History, Integer> historyDao) {
        this.historyDao = historyDao;
    }

    public PersonDao getPersonDao() {
        return personDao;
    }

    public void setPersonDao(PersonDao personDao) {
        this.personDao = personDao;
    }


}
